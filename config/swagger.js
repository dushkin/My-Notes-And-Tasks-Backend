// config/swagger.js
import swaggerJsdoc from 'swagger-jsdoc';

// Main Swagger definition object
const swaggerDefinition = {
  openapi: '3.0.0', // Specifies the OpenAPI version
  info: {
    title: 'Notes & Tasks Backend API', // Title of the API
    version: '1.0.0', // Version of the API
    description: 'API documentation for the Notes & Tasks backend service, handling user authentication and notes/tasks data management.',
    // Optional contact information
    // contact: {
    //   name: 'API Support',
    //   url: 'http://www.e2e.com/support',
    //   email: 'support@e2e.com',
    // },
    // Optional license information
    // license: {
    //   name: 'MIT',
    //   url: 'https://opensource.org/licenses/MIT',
    // },
  },
  servers: [
    {
      // Use environment variable for base URL or default to localhost for development
      url: `http://localhost:${process.env.PORT || 5001}/api`, description: 'Development server',
    },
    {
      url: 'https://notask.co/api', description: 'Production server',
    },
  ],
  
  // Define reusable components like schemas and security schemes
  components: {
    // Reusable data structures (schemas)
    schemas: {
      UserInput: {
        type: 'object',
        required: ['email', 'password'],
        properties: {
          email: {
            type: 'string',
            format: 'email',
            description: "User's email address.",
            example: 'user@e2e.com',
          },
          password: {
            type: 'string',
            format: 'password',
            description: "User's password (min 8 characters).",
            example: 'password123',
          },
        },
      },
      UserResponse: { // Schema for user object returned (WITHOUT password)
        type: 'object',
        properties: {
          _id: {
            type: 'string',
            format: 'objectId', // Indicates MongoDB Object ID
            description: 'Unique User ID generated by MongoDB.',
            example: '605c72ef9f1d4e2f3c6e4b1c',
          },
          email: {
            type: 'string',
            format: 'email',
            description: "User's email address.",
            example: 'user@e2e.com',
          },
          notesTree: {
            type: 'array', // Representing the root of the user's tree
            description: "User's notes and tasks data structure (can contain nested objects/arrays).",
            items: {
               $ref: '#/components/schemas/Item' // Use recursive ref here
            },
            example: [
              { id: 'folder-1', type: 'folder', label: 'Work', children: [] },
              { id: 'note-1', type: 'note', label: 'Meeting Notes', content: '<p>Discuss project X</p>' }
            ],
          },
          createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the user was created.',
          },
          updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Timestamp when the user was last updated.',
          }
        }
      },
      AuthResponse: { // Schema for successful auth responses
        type: 'object',
        properties: {
          token: {
            type: 'string',
            description: 'JWT authentication token for subsequent requests.',
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNj...',
          },
          user: {
            $ref: '#/components/schemas/UserResponse', // Reference the UserResponse schema
          },
        },
      },
      Item: { // Represents a single item in the tree - Defined recursively
         type: 'object',
         properties: {
            id: { type: 'string', description: 'Unique identifier for the item (UUID)', example: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890'},
            label: { type: 'string', description: 'Display name of the item', example: 'My Note' },
            type: { type: 'string', enum: ['folder', 'note', 'task'], description: 'Type of the item' },
            content: { type: 'string', description: 'HTML content (for notes/tasks)', example: '<p>Details...</p>', nullable: true },
            completed: { type: 'boolean', description: 'Completion status (for tasks)', example: false, nullable: true },
            children: { // Self-referential for folders
                type: 'array',
                description: 'Child items (only for folders)',
                items: {
                    $ref: '#/components/schemas/Item' // Recursive reference
                },
                nullable: true
            }
         },
         required: ['id', 'label', 'type'] // Core required fields for any item
      },
      CreateItemInput: {
        type: 'object',
        required: ['label', 'type'],
        properties: {
          label: { type: 'string', description: 'Label for the new item', example: 'New Folder' },
          type: { type: 'string', enum: ['folder', 'note', 'task'], description: 'Type of the new item' },
          content: { type: 'string', description: '(Optional) Initial content for note/task', example: '<p>Initial content</p>', nullable: true },
          completed: { type: 'boolean', description: '(Optional) Initial completion status for task', example: false, nullable: true }
        }
      },
      UpdateItemInput: {
          type: 'object',
          description: 'Provide only the fields you want to update.',
          properties: {
              label: { type: 'string', description: 'New label for the item', example: 'Updated Name', nullable: true },
              content: { type: 'string', description: 'New HTML content for note/task', example: '<p>Updated details.</p>', nullable: true },
              completed: { type: 'boolean', description: 'New completion status for task', example: true, nullable: true }
          },
          minProperties: 1 // Require at least one property to be present for an update
      },
      NotesTreeGetResponse: { // Schema for GET /items/tree
        type: 'object',
        properties: {
          notesTree: {
             type: 'array',
             description: "The user's notes and tasks data structure.",
             items: {
                $ref: '#/components/schemas/Item' // Array of Items
             },
             example: []
           }
        }
      },
      ErrorResponse: { // Generic error response schema
        type: 'object',
        properties: {
          error: {
            type: 'string',
            description: 'Description of the error that occurred.',
            example: 'Invalid credentials',
          },
        },
      },
    },
    // Define security schemes (how authentication is handled)
    securitySchemes: {
      bearerAuth: { // Can be any name, used later in 'security' sections
        type: 'http', // HTTP authentication
        scheme: 'bearer', // Specifically, the Bearer scheme
        bearerFormat: 'JWT', // Optional hint that it's a JWT
        description: 'Enter JWT token obtained from login, prefixed with "Bearer ". Example: "Bearer eyJ..."',
      },
    },
     // --- Add Reusable Responses ---
     responses: {
        UnauthorizedError: {
            description: 'Unauthorized - Authentication token is missing or invalid.',
            content: { 'application/json': { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        },
        NotFoundError: {
            description: 'Not Found - The requested resource (e.g., user, item, parent folder) could not be found.',
             content: { 'application/json': { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        },
        BadRequestError: {
            description: 'Bad Request - The request payload is invalid (e.g., missing required fields, validation error, name conflict).',
            content: { 'application/json': { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        },
         ServerError: {
            description: 'Internal Server Error - An unexpected error occurred on the server.',
            content: { 'application/json': { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        }
    }
  },
  // Optional: Define tags for grouping endpoints in the UI
  tags: [
    {
      name: 'Auth',
      description: 'User Authentication Endpoints (Register/Login)',
    },
    {
      name: 'Items',
      description: 'Managing Notes, Folders, and Tasks Tree Items',
    },
  ],
};

// Options object passed to swagger-jsdoc
const options = {
  swaggerDefinition,
  // Path to the API docs files (JSDoc comments in route files)
  // This assumes your route files are directly inside the 'routes' directory
  apis: ['./routes/*.js'],
};

// Initialize swagger-jsdoc
const swaggerSpec = swaggerJsdoc(options);

// Export the generated specification
export default swaggerSpec;